<?php

/**
 * @file
 */

use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\Group;
use Drupal\Core\Render\BubbleableMetadata;

/**
 * Implement hook_views_query_alter.
 *
 * Se usa para alterar la consulta sql de la vista.
 *
 * @param view propiedades de la vista
 * @param query consulta sql de la vista
 */
function uniagustiniana_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  switch ($view->id()) {
    case 'grupo_contenido':
      if ($view->getDisplay()->display['id'] == 'block_1'
      || $view->getDisplay()->display['id'] == 'block_4') {
        $current_path = \Drupal::service('path.current')->getPath();
        $path_args = explode('/', $current_path);
        if ($path_args[1] == 'node' && is_numeric($path_args[2])) {
          $id_query = db_select('groups_field_data', 'g');
          $id_query->addField('g', 'id');
          $id_query->join('group_content_field_data', 'gd', 'g.id = gd.gid');
          $id_query->join('node_field_data', 'nd', 'gd.entity_id = nd.nid');
          $id_query->condition('nd.nid', $path_args[2], '=');
          $result = $id_query->execute()->fetchObject();
          if ($result && $result->id) {
            foreach ($query->where as &$condition_group) {
              foreach ($condition_group['conditions'] as &$condition) {
                if ($condition['field'] == 'groups_field_data.id') {
                  $condition = array(
                    'field' => 'groups_field_data.id',
                    'value' => $result->id,
                    'operator' => '=',
                  );
                }
              }
            }
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_theme().
 * Este hook se usa para implementar twig.
 */
function uniagustiniana_theme($existing, $type, $theme, $path) {
  return [
    'pdf_documents' => [
      'variables' => [
        'pdfs' => NULL,
      ],
    ],
    'programas_facultad' => [
      'variables' => [
        'programas' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function uniagustiniana_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (isset($form['#webform_id']) && $form['#webform_id'] == 'contact') {
    $current_path = \Drupal::service('path.current')->getPath();
    $path = explode('/', $current_path);
    if (isset($path[1])
        && $path[1] == 'group'
        && isset($path[2])
        && is_numeric($path[2])) {
      $group = Group::load($path[2]);
      if ($group->bundle() == 'programa') {
        $form['elements']['programa']['#default_value'] = $path[2];
        $form['elements']['programa']['#access'] = FALSE;
      }
    }
  }

  if (isset($form['#webform_id']) && $form['#webform_id'] == 'curso') {
    $current_path = \Drupal::service('path.current')->getPath();
    $path = explode('/', $current_path);
    if (isset($path[1])
        && $path[1] == 'product'
        && isset($path[2])
        && is_numeric($path[2])) {
      $form['elements']['curso']['#default_value'] = $path[2];
      $form['elements']['curso']['#access'] = FALSE;
      $product = \Drupal\commerce_product\Entity\Product::load((int) $path[2]);
      if ($product) {
        $id_programa = $product->get('field_programa')->getValue();
        if (isset($id_programa[0]['target_id'])) {
          $form['id_programa'] = [
            '#type' => 'hidden',
            '#value' => $id_programa[0]['target_id'],
          ];
          $form['actions']['submit']['#submit'][] = 'uniagustiniana_curso_form_submit';
          $form['actions']['submit']['#attributes'] = [
            'formTarget' => '_blank',
          ];
        }
      }
    }
  }

  if (isset($form['#webform_id']) && $form['#webform_id'] == 'formulario_home') {
    $form['actions']['submit']['#submit'][] = 'ask_for_information_form_submit';
  }
}

/**
 * Custom submit handler for aks for information form.
 */
function ask_for_information_form_submit($form, FormStateInterface $form_state) {
  $form_state->setRedirect('entity.group.canonical', [
    'group' => $form_state->getValue('seleccionar_programa')
  ]);
  drupal_set_message('Gracias por registrarte, un asesor se comunicarÃ¡ contigo para ampliar la informaciÃ³n del programa de tu interÃ©s.');
}

/**
 * Custom submit handler for login form.
 */
function uniagustiniana_curso_form_submit($form, FormStateInterface $form_state) {
  $form_state->setRedirect('uniagustiniana.download_program', [
    'fid' => $form_state->getValue('id_programa'),
  ]);
}

/**
 * Implements hook_token_info().
 *
 * @return array genera token
 */
function uniagustiniana_token_info() {
  $info = [];
  // Add any new tokens.
  $info['tokens']['customtoken']['customemail'] = [
    'name' => t('Email'),
    'description' => t('Email contact'),
  ];
  // Return them.
  return $info;
}

/**
 * Implements hook_tokens().
 *
 * @param string $type
 * @param array $tokens
 * @param array $data
 * @param array $options
 * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
 *
 * @return array
 */
function uniagustiniana_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();
  if ($type == 'customtoken') {
    // Loop through each of the available tokens.
    foreach ($tokens as $name => $original) {
      // Find the desired token by name.
      switch ($name) {
        case 'customemail':
          $current_path = \Drupal::service('path.current')->getPath();
          $path_args = explode('/', $current_path);
          $email = \Drupal::config('system.site')->get('mail');
          if ($path_args[1] == 'group'
          && is_numeric($path_args[2])) {
            $group = Group::load($path_args[2]);
            if (isset($group->field_correo_de_contacto->value)
            && !empty($group->field_correo_de_contacto->value)) {
              $email = $group->field_correo_de_contacto->value;
            }
          }
          // Add the new value into the replacements array.
          $replacements[$original] = $email;
          break;
      }
    }
  }
  // Return the replacements.
  return $replacements;
}

/**
 * Implements hook_cron().
 */
function uniagustiniana_cron() {
  $batch = \Drupal::service('uniagustiniana.soap_siga');
  $batch->getCurses();
}
